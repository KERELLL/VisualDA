<?xml version="1.0" encoding="utf-8"?>
<ScrollView
	xmlns:android="http://schemas.android.com/apk/res/android"
	android:layout_width="match_parent"
    android:layout_height="match_parent">
<LinearLayout 
    android:layout_width="match_parent"
	android:orientation="vertical"
	 android:gravity="center_horizontal"
    android:layout_height="match_parent">
		<TextView
			android:textSize="@dimen/textSizeProgramm"
			android:textColor="#000000"
			android:gravity="center"
			android:text="Поиск наибольшей подпоследовательности"
			android:layout_width="wrap_content"
			android:textStyle="bold"
			android:layout_height="wrap_content"
			android:layout_marginRight="0.0dp"
			android:layout_marginBottom="10.0dp"
			android:layout_marginTop="31.0dp"/>
		<TextView
			android:text="Формулировка задачи:\nДля двух заданных строк X и Y найти все наидлиннейшие общие подпоследовательности Z[1..k] строк X и Y, где k – длина наидлиннейшей общей подпоследовательности.\nСложность алгоритма:O(n1 * n2), где n1 и n2 -  длины X и Y"
			android:textColor="#000000"
			android:gravity="left"
			android:textSize="16dp"
			android:layout_width="wrap_content"
			android:id="@+id/taskDescription"
			android:layout_height="wrap_content"
			android:layout_marginLeft="10.0dp"
			android:layout_marginRight="16.0dp" />
		<TextView
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:textColor="#000000"
			android:id="@+id/taskMethod"
			android:gravity="left"
			android:textSize="16dp"
			android:layout_marginLeft="10.0dp"
			android:text="Метод решения задачи:\n- Номер строки - номера элементов первой строки\n- Номер столбца - элементов второй строки"
			android:layout_marginRight="7.5dp" />
	<TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
		android:textColor="#000"
		android:textSize="17dp"
		android:id="@+id/codeView1"
		android:gravity="center"
		android:text="Если Xi = Yj и i > 0, j > 0, то L[i, j] = L[i - 1, j - 1] + 1"/>
		<ImageView
			android:layout_width="240dp"
			android:layout_height="74dp"
			android:background="@drawable/lcsPick1"
			android:layout_marginTop="5.5dp" />
		<TextView
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:textColor="#000"
			android:gravity="center"
			android:textSize="15dp"
			android:id="@+id/codeView2"
			android:text="Если Xi != Yj и i > 0, j > 0, то L[i, j] = max(L[i - 1, j], L[i, j - 1])"
			android:layout_marginTop="5.5dp" />
		<ImageView
			android:layout_width="240dp"
			android:layout_height="75dp"
			android:background="@drawable/lcspic2"
			android:layout_marginTop="5.5dp" />
		<TextView
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:textColor="#000"
			android:gravity="center"
			android:textSize="15dp"
			android:id="@+id/codeView3"
			android:text="После заполнения матрицы, соединив эти ячейки, мы получим искомый LCS. Соединять при этом нужно двигаясь от максимальных индексов к минимальным, если ячейка подсвечена, то добавляем соответствующий элемент к LCS, если нет, то двигаемся вверх или влево в зависимости от того где находится большее значение в матрице"
			android:layout_marginTop="5.5dp"
			android:layout_marginRight="10.0dp"
			android:layout_marginLeft="10.0dp"
			android:layout_marginBottom="10.0dp" />

</LinearLayout>
</ScrollView>